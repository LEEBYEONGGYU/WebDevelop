package jaro_191021;

import java.util.Scanner;

public class WDB {

	public static void main(String[] args) {
		LinkedList L = new LinkedList();
		System.out.println("1 첫번째 노드 삽입");
		System.out.println("2 찾아서 다음 노드에 삽입");
		System.out.println("3 마지막 노드에 삽입");
		System.out.println("4 첫번째 노드 삭제");
		System.out.println("5 찾은 노드 삭제");
		System.out.println("6 마지막 노드 삭제");
		System.out.println("7 리스트 출력");
		System.out.println("8 끝내기");
		
		Scanner input = new Scanner(System.in);
		int a = input.nextInt();
		
		L.insertLastNode("월");
		L.insertLastNode("수");
		L.insertLastNode("일");
		switch(a) {
		//첫번째 노드 삽입
		case 1:
			L.insertFirstNode("일");
			L.printList();
		break;
		//찾아서 다음 노드에 삽입
		case 2:
			ListNode pre = L.searchNode("수");
			if(pre==null) {
				System.out.println("검색실패>>찾는 데이터가 없습니다");
			}else {
				L.insertMiddleNode(pre, "금2");
				L.printList();
			}
			break;
		//마지막 노드에 삽입
		case 3:
			L.insertLastNode("토");
			L.printList();
			break;
			
		//첫번째 노드 삭제
		case 4:
			L.deleteFirstNode();
			L.printList();
			break;
		//찾은 노드 삭제
		case 5:
			ListNode pre2 = L.searchNode("수");
			if(pre2==null) {
				System.out.println("검색실패>>찾는 데이터가 없습니다");
			}else {
				L.insertMiddleNode2(pre2, "금");
				L.printList();
			}
			
			break;
		//마지막 노드 삭제
		case 6:
			L.deleteLastNode();
			L.printList();
			break;
		//리스트 출력
		case 7:
			L.printList();
			break;
		//끝내기
		case 8:
			break;
			
			
		}
		
	}

}

class LinkedList{
	private ListNode head;
	public LinkedList() {
		head = null;
	}
	public void insertMiddleNode2(ListNode pre2, String string2) {
		ListNode node2 = new ListNode(string2);
	      if(head != null){
	         head = node2;
	      }else{
	         ListNode current = head;
	         while(current.next!=pre2){
	            current = current.next;
	         }
	         current = current.next;
	         node2.next = current.next;
	         current.next = node2;
	      }
		
	}
	public void deleteFirstNode() {
		if(head==null) {
			System.out.println("지울 노드 존재하지 않음");
		}else {
			head=head.next;
		}
		
		
	}
	public void insertFirstNode(String string) {
		 ListNode node = new ListNode(string);
	      if(head == null){
	         head = node;
	      }else{
	         ListNode current = head;
	         node.next = current;
	         head = node;
	      }
	}
	public void insertMiddleNode(ListNode pre, String data) {
		ListNode node = new ListNode(data);
		
		while(current !=null){
			
		}
	      if(head != null){
	         head = node;
	      }else{
	         ListNode current = head;
	         while(current.next!=pre){
	            current = current.next;
	         
	         current = current.next;
	         node.next = current.next;
	         current.next = node;
	         }
	      }
	}
	public void insertLastNode(String data) {
		 ListNode node = new ListNode(data);
	      if(head == null){
	         head = node;
	      }else{
	         ListNode current = head;
	         while(current.next!=null){
	            current = current.next;
	         }
	         current.next = node;
	      }

	}
	
	public void deleteLastNode() {
		 if(head==null){
	         System.out.println("지울 노드 존재하지 않음");
	      }else{
	         ListNode prev = head;
	         ListNode current = head.next;
	         while(current.next!=null){
	            prev = current;
	            current = current.next;
	         }
	         prev.next = null;
	      }
	}
	
	public ListNode searchNode(String data) {
	    if(head==null){
	         System.out.println("지울 노드 존재하지 않음");
	      }else{
	         head = head.next;
	      }
	   
	      ListNode node = new ListNode(data);
	      if(head==null){
	         System.out.println("노드가 비어있음");
	         return null;
	      }else{
	         ListNode current = head;
	         while(current.data!=node.data){
	            current = current.next;
	         }
	         return current;
	      }
	}
	
	public void reverseList() {
		   ListNode next = head;
		      ListNode current = null;
		      ListNode prev = null;
		 
		      while(next!=null){
		          prev = current;
		          current = next;
		          next = next.next;
		          current.next = prev;
		      }
		      head = current;
	}
	
	public void printList() {
		ListNode current = head;
        System.out.print("[");
        while(current.next!=null){
           System.out.print(current.data + ", ");
           current = current.next;
        }
        System.out.print(current.data);
        System.out.print("]");
        System.out.println();
     }

}

class ListNode{
	  String data;
	   ListNode next;
	   
	   public ListNode(){
	      this.data = null;
	      this.next = null;
	   }
	   
	   public ListNode(String data){
	      this.data = data;
	      this.next = null;
	   }
	   
	   public ListNode(String data, ListNode next){
	      this.data = data;
	      this.next = next;
	      this.next = null;
	   }
	   
	   public String getData(){
	      return this.data;
	   }
}