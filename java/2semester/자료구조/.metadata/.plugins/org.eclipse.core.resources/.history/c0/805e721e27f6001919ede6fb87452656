package jaro_191021;

import java.util.Scanner;

public class WDB {

	public static void main(String[] args) {
		LinkedList L = new LinkedList();
		System.out.println("1 첫번째 노드 삽입");
		System.out.println("2 찾아서 다음 노드에 삽입");
		System.out.println("3 마지막 노드에 삽입");
		System.out.println("4 첫번째 노드 삭제");
		System.out.println("5 찾은 노드 삭제");
		System.out.println("6 마지막 노드 삭제");
		System.out.println("7 리스트 출력");
		System.out.println("8 끝내기");
		
		Scanner input = new Scanner(System.in);
		int a = input.nextInt();
		
		L.insertLastNode("월");
		L.insertLastNode("수");
		L.insertLastNode("일");
		switch(a) {
		//첫번째 노드 삽입
		case 1:
			L.insertFirstNode("일");
			L.printList();
		break;
		
		//찾아서 다음 노드에 삽입
		case 2:
			ListNode pre = L.searchNode("수");
			if(pre==null) {
				System.out.println("검색실패>>찾는 데이터가 없습니다");
			}else {
				L.insertMiddleNode(pre, "금");
				L.printList();
			}
			break;
		//마지막 노드에 삽입
		case 3:
			LinkedList temp = L;
			LinkedList temp2;
			while(temp != null) {
				 temp2 = temp;
			}
			temp.insertLastNode("일");
			break;
			
		//첫번째 노드 삭제
		case 4:
			L.deleteLastNode();
			L.printList();
			break;
		//찾은 노드 삭제
		case 5:
			ListNode pre2 = L.searchNode("수");
			if(pre2==null) {
				System.out.println("검색실패>>찾는 데이터가 없습니다");
			}else {
				L.insertMiddleNode(pre2, "금");
				L.printList();
			}
			
			break;
		//마지막 노드 삭제
		case 6:
			L.deleteLastNode();
			L.printList();
			break;
		//리스트 출력
		case 7:
			break;
		//끝내기
		case 8:
			break;
			
			
		}
		
	}

}

class LinkedList{
	private ListNode head;
	public LinkedList() {
		head = null;
	}
	public void insertMiddleNode(ListNode pre, String data) {
		ListNode newNode = new ListNode(data);
		newNode.link = pre.link;
		pre.link = newNode;
	}
	public void insertLastNode(String data) {
		ListNode newNode = new ListNode(data);
		if(head == null) {
			this.head = newNode;
		}else {
			ListNode temp = head;
			while(temp.link !=null) temp = temp.link;
			temp.link = newNode;
		}
	}
	
	public void deleteLastNode() {
		ListNode pre, temp;
		if(head == null) return;
		if(head.link == null) {
			head = null;
		}else {
			pre=head;
			temp = head.link;
			while(temp.link !=null) {
				pre = temp;
				temp = temp.link;
			}
			pre.link = null;
		}
	}
	
	public ListNode searchNode(String data) {
		ListNode temp = this.head;
		while(temp !=null) {
			if(data == temp.getData())
				return temp;
			else temp = temp.link;
		}
		return temp;
	}
	
	public void reverseList() {
		ListNode next = head;
		ListNode current = null;
		ListNode pre = null;
		while(next !=null) {
			pre = current;
			current = next;
			current.link = pre;
		}
		head = current;
	}
	
	public void printList() {
		ListNode temp = this.head;
		System.out.printf("L = (");
		while(temp !=null) {
			System.out.printf(temp.getData());
			temp = temp.link;
			if(temp !=null) {
				System.out.printf(", ");
			}
		}
		System.out.println(")");
	}
}

class ListNode{
	private String data;
	public ListNode link;
	public ListNode() {
		this.data = null;
		this.link = null;
	}
	
	public ListNode (String data) {
		this.data = data;
		this.link = null;
	}
	
	public ListNode(String data, ListNode link) {
		this.data = data;
		this.link = link;
	}
	
	public String getData() {
		return this.data;
	}
}

public class ListNode {
	   String data;
	   ListNode next;
	   
	   public ListNode(){
	      this.data = null;
	      this.next = null;
	   }
	   
	   public ListNode(String data){
	      this.data = data;
	      this.next = null;
	   }
	   
	   public ListNode(String data, ListNode next){
	      this.data = data;
	      this.next = next;
	      this.next = null;
	   }
	   
	   public String getData(){
	      return this.data;
	   }
}